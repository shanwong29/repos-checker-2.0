{"version":3,"sources":["Component/TabPanel/TabPanel.module.css","Component/AuthorInfo/AuthorInfo.module.css","Component/LoadingCircle/LoadingCircle.module.css","Component/Navbar/Navbar.module.css","Component/Issue/Issue.module.css","Component/AuthorInfo/AuthorInfo.tsx","service/getFormattedDate.ts","Component/LoadingCircle/LoadingCircle.tsx","hooks/useFetch.tsx","constants.ts","Component/Comments/Comments.tsx","Component/Issue/Issue.tsx","Component/TabPanel/TabPanel.tsx","Component/Navbar/Navbar.tsx","App.tsx","serviceWorker.js","index.tsx","Component/Comments/Comments.module.css","App.module.css"],"names":["module","exports","AuthorBasicInfo","authorName","avatarUrl","timeStamp","className","classes","link","href","target","rel","src","alt","profilePic","formattedDate","Date","date","getDate","month","0","1","2","3","4","5","6","7","8","9","10","11","getMonth","year","getFullYear","hh","String","getHours","padStart","mm","getMinutes","getFormattedDate","Loader","loadingCircle","url","API_URL","useFetch","useFetchReqObj","console","log","queryType","variables","skip","useState","data","setData","errorFromGithubApi","setErrorFromGithubApi","errorFromServer","setErrorFromServer","fetchMoreResult","setFetchMoreResult","isLoading","setIsLoading","fetchData","a","axios","post","response","errors","message","repository","name","fetchMore","fetchMoreReqObj","cursor","previousData","newData","Comments","ID","displayComments","hasNextPage","endCursor","totalCount","useEffect","node","comments","oldEdges","edges","pageInfo","displayElements","map","el","key","author","login","eachCommentWrapper","AuthorInfo","createdAt","commentText","dangerouslySetInnerHTML","__html","bodyHTML","LoadingCircle","commentsWrapper","fetchMoreBtn","onClick","length","Issue","issue","activeIssue","setActiveIssue","showComments","setShowComments","issueIndex","numOfComments","issueContent","isActiveIssue","issueWrapper","issueDetailsWrapper","title","toggleBtn","issueText","id","btnWrapper","toggleBtnDisabled","disabled","TabPanel","currentTab","setCurrentTab","displayTabs","label","representedState","i","isActive","activeTab","normalTap","tapWrapper","Navbar","setReposQuery","inputWarning","setInputWarning","nav","logo","formWrapper","form","onSubmit","e","preventDefault","query","queryInput","value","split","owner","trim","handleSearchQuery","input","type","placeholder","submitBtn","App","displayData","lengthOfEdgesShown","reposQuery","pullRequests","openIssues","states","closedIssues","issues","previousEdges","reposInfo","fetchMoreBtnWrapper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,OAAS,oBAAsB,YAAc,UAAU,QAAU,UAAU,WAAa,6BAA6B,UAAY,4BAA4B,UAAY,wD,mBCA3LD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,KAAO,2B,mBCArED,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,KAAO,8B,sDCA9ED,EAAOC,QAAU,CAAC,OAAS,oBAAsB,YAAc,UAAU,aAAe,UAAU,YAAc,UAAU,YAAc,UAAU,WAAa,UAAU,MAAQ,UAAU,IAAM,oBAAoB,KAAO,qBAAqB,KAAO,qBAAqB,KAAO,qBAAqB,MAAQ,sBAAsB,UAAY,0BAA0B,YAAc,4BAA4B,aAAe,6BAA6B,YAAc,8B,uCCAjdD,EAAOC,QAAU,CAAC,OAAS,oBAAsB,YAAc,UAAU,YAAc,UAAU,aAAe,4BAA4B,oBAAsB,mCAAmC,UAAY,yBAAyB,WAAa,0BAA0B,UAAY,yBAAyB,kBAAoB,mC,0IC8B3TC,EArB2B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,WACAC,EAEI,EAFJA,UACAC,EACI,EADJA,UAEA,OACE,oCACE,uBACEC,UAAWC,IAAQC,KACnBC,KAAI,6BAAwBN,GAC5BO,OAAO,SACPC,IAAI,uBAEJ,yBAAKC,IAAKR,EAAWS,IAAKV,EAAYG,UAAWC,IAAQO,aACzD,gCAASX,IAEX,yCC1B0B,SAACE,GAK/B,IAeIU,EAAgB,IAAIC,KAAKX,GACzBY,EAAOF,EAAcG,UAErBC,EAlBsB,CACxBC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,GAAI,MACJC,GAAI,OAKShB,EAAciB,YAEzBC,EAAOlB,EAAcmB,cACrBC,EAAKC,OAAOrB,EAAcsB,YAAYC,SAAS,EAAG,KAClDC,EAAKH,OAAOrB,EAAcyB,cAAcF,SAAS,EAAG,KAExD,MAAM,GAAN,OAAUrB,EAAV,YAAkBE,EAAlB,YAA2Bc,EAA3B,YAAmCE,EAAnC,YAAyCI,GDFrBE,CAAiBpC,M,iBEnBxBqC,EAJA,WACb,OAAO,yBAAKpC,UAAWC,IAAQoC,iB,yDCA3BC,ECEO,CACXA,IAAK,CACHC,QAAQ,mDDJOD,IAAIC,QAgIRC,EA9GE,SAACC,GAChBC,QAAQC,IAAI,YADuC,IAE3CC,EAA+BH,EAA/BG,UAAWC,EAAoBJ,EAApBI,UAAWC,EAASL,EAATK,KAFqB,EAI3BC,mBAAqB,MAJM,mBAI5CC,EAJ4C,KAItCC,EAJsC,OAKCF,mBAClD,MANiD,mBAK5CG,EAL4C,KAKxBC,EALwB,OAQLJ,mBAAwB,MARnB,mBAQ5CK,EAR4C,KAQ3BC,EAR2B,OASLN,mBAAqB,MAThB,mBAS5CO,EAT4C,KAS3BC,EAT2B,OAUjBR,oBAAkB,GAVD,mBAU5CS,EAV4C,KAUjCC,EAViC,KAmGnD,MAAO,CACLT,OACAE,qBACAE,kBACAM,UA3Fa,uCAAG,gCAAAC,EAAA,0DACZb,EADY,iEAMdW,GAAa,GANC,SAOSG,IAAMC,KAAKvB,EAAK,CACrCM,YACAC,cATY,qBAONG,EAPM,EAONA,MAKCc,SAZK,wBAcZX,EAAsBH,EAAKc,SAASC,OAAO,GAAGC,SAC9Cf,EAAQ,MACRI,EAAmB,MACnBE,EAAmB,MACnBE,GAAa,GAlBD,8BAsBU,OAApBT,EAAKiB,WAtBK,wBAwBJC,EAASrB,EAATqB,KACRf,EAAsB,oDAAD,OACiCe,EADjC,OAGrBjB,EAAQ,MACRI,EAAmB,MACnBE,EAAmB,MACnBE,GAAa,GA/BD,2BAoCdR,EAAQD,GACRG,EAAsB,MACtBE,EAAmB,MACnBE,EAAmB,MACnBE,GAAa,GAxCC,kDA2CdJ,EAAmB,EAAD,IAClBJ,EAAQ,MACRQ,GAAa,GA7CC,0DAAH,qDA4FbU,UAtCa,uCAAG,WAAOC,GAAP,mBAAAT,EAAA,0DACZb,EADY,wDAKRuB,EAAWD,EAAXC,OALQ,SAQdZ,GAAa,GARC,SASSG,IAAMC,KAAKvB,EAAK,CACrCM,YACAC,UAAU,eAAMA,EAAP,CAAkBwB,OAAQA,MAXvB,qBASNrB,EATM,EASNA,MAKCc,SAdK,wBAgBZX,EAAsBH,EAAKc,SAASC,OAAO,GAAGC,SAC9CP,GAAa,GAjBD,2BAqBdF,EAAmB,CACjBe,aAAcF,EAAgBE,aAC9BC,QAASvB,IAEXS,GAAa,GAzBC,kDA4BdJ,EAAmB,EAAD,IAClBI,GAAa,GA7BC,0DAAH,sDAuCbH,kBACAE,cEzBWgB,EA1FoB,SAAC,GAAY,IAAVC,EAAS,EAATA,GACpC/B,QAAQC,IAAI,YADiC,IAqBzC+B,EACAC,EACAC,EACAC,EAxByC,EAWzCrC,EAAS,CACXI,UAAW,WACXC,UAAW,CAAE4B,MACb3B,MAAO2B,IAVPzB,EAJ2C,EAI3CA,KAGAU,GAP2C,EAK3CR,mBAL2C,EAM3CE,gBAN2C,EAO3CM,WACAS,EAR2C,EAQ3CA,UACAb,EAT2C,EAS3CA,gBACAE,EAV2C,EAU3CA,UAmBF,GAZAsB,qBAAU,WACRpB,MACC,IAMCV,IACF0B,EAAkB1B,EAAK+B,KAAKC,UAG1B1B,EAAiB,CACnB,IAAM2B,EAAW3B,EAAgBgB,cACjCI,EAAkBpB,EAAgBiB,QAAQQ,KAAKC,UAC/BE,MAAhB,sBAA4BD,GAA5B,YAAyCP,EAAgBQ,QAG3D,GAAIR,EAAiB,CAAC,IACZS,EAAaT,EAAbS,SACRR,EAAcQ,EAASR,YACvBC,EAAYO,EAASP,UACrBC,EAAaH,EAAgBG,WAG/B,IAAMO,EACJV,GACAA,EAAgBQ,MAAMG,KAAI,SAACC,EAASC,GAAiB,IAAD,EACrBD,EAAGP,KAAKS,OAA7B1F,EAD0C,EAC1CA,UAAW2F,EAD+B,EAC/BA,MAEnB,OACE,yBAAKzF,UAAWC,IAAQyF,mBAAoBH,IAAKA,GAC/C,kBAACI,EAAD,CACE9F,WAAY4F,EACZ3F,UAAWA,EACXC,UAAWuF,EAAGP,KAAKa,YAGrB,yBACE5F,UAAWC,IAAQ4F,YACnBC,wBAAyB,CAAEC,OAAQT,EAAGP,KAAKiB,gBAMrD,OACE,oCACGxC,GAAa,kBAACyC,EAAD,MACbb,GACC,yBAAKpF,UAAWC,IAAQiG,iBACtB,yCAAerB,EAAf,KACCO,EACAT,GACC,4BACE3E,UAAWC,IAAQkG,aACnBC,QAAS,WACPjC,EAAU,CACRG,aAAcI,EAAgBQ,MAC9Bb,OAAQO,MALd,0BAS0BF,EAAgBQ,MAAMmB,OAThD,IASyDxB,EATzD,Q,gBCUGyB,EArFiB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjC7D,QAAQC,IAAI,UADiC,MAEPI,mBAAwB,MAFjB,mBAEtCyD,EAFsC,KAEzBC,EAFyB,OAGL1D,oBAAkB,GAHb,mBAGtC2D,EAHsC,KAGxBC,EAHwB,KAkF7C,OA7EA7B,qBAAU,WACR2B,EAAe,QACd,CAACF,IAEJA,EAAQA,EAAMrB,MAAMG,KAAI,SAACC,EAASsB,GAChC,IAAMC,EAAgBvB,EAAGP,KAAKC,SAASH,WADgB,EAG1BS,EAAGP,KAAKS,OAA7BC,EAH+C,EAG/CA,MAAO3F,EAHwC,EAGxCA,UACTgH,EAAexB,EAAGP,KAAKiB,SAEvBe,EAAgBP,IAAgBI,EAEtC,OACE,yBAAKrB,IAAKqB,EAAY5G,UAAWC,IAAQ+G,cACvC,kBAACrB,EAAD,CACE9F,WAAY4F,EACZ3F,UAAWA,EACXC,UAAWuF,EAAGP,KAAKa,YAErB,yBAAK5F,UAAWC,IAAQgH,qBACtB,4BAAK3B,EAAGP,KAAKmC,QAEXH,GACA,4BACE/G,UAAWC,IAAQkH,UACnBf,QAAS,WACPK,EAAeG,GACfD,GAAgB,KAJpB,oBAWDI,GACC,oCACE,yBACE/G,UAAWC,IAAQmH,UACnBtB,wBAAyB,CAAEC,OAAQe,KAGpCJ,GAAgB,kBAAC,EAAD,CAAUjC,GAAIa,EAAGP,KAAKsC,KAEvC,yBAAKrH,UAAWC,IAAQqH,aACpBZ,GACA,oCACE,4BACE1G,UACE6G,EACI5G,IAAQkH,UACRlH,IAAQsH,kBAEdnB,QAAS,kBAAMO,GAAgB,IAC/Ba,UAAWX,GAPb,0BASuBA,EATvB,KADF,KAgBF,4BACE7G,UAAWC,IAAQkH,UACnBf,QAAS,WACPK,EAAe,MACfE,GAAgB,KAJpB,wB,iBCtCDc,EA7BoB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAChDjF,QAAQC,IAAI,SACZ,IAMMiF,EANO,CACX,CAAEC,MAAO,gBAAiBC,iBAAkB,gBAC5C,CAAED,MAAO,cAAeC,iBAAkB,cAC1C,CAAED,MAAO,gBAAiBC,iBAAkB,iBAGrBzC,KAAI,SAACC,EAAIyC,GAChC,IAAIC,GAAW,EAKf,OAJI1C,EAAGwC,mBAAqBJ,IAC1BM,GAAW,GAIX,4BACEzC,IAAKwC,EACL/H,UAAS,UAAKgI,EAAW/H,IAAQgI,UAAYhI,IAAQiI,WACrD9B,QAAS,WACPuB,EAAcrC,EAAGwC,oBAGlBxC,EAAGuC,UAKV,OAAO,yBAAK7H,UAAWC,IAAQkI,YAAaP,I,gBCuC/BQ,EAnEkB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACdtF,mBAAS,IADK,mBAC/CuF,EAD+C,KACjCC,EADiC,KAGtD7F,QAAQC,IAAI,SAmBZ,OACE,oCACE,yBAAK3C,UAAWC,IAAQuI,KACtB,0BAAMxI,UAAWC,IAAQwI,MACvB,uBAAGzI,UAAU,sBADf,kBAGA,6BACE,uBACEA,UAAWC,IAAQC,KACnBC,KAAK,mCACLC,OAAO,SACPC,IAAI,uBAJN,OAQA,uBACEL,UAAWC,IAAQC,KACnBC,KAAK,kDACLC,OAAO,SACPC,IAAI,uBAJN,UAUJ,yBAAKL,UAAWC,IAAQyI,aACtB,0BAAM1I,UAAWC,IAAQ0I,KAAMC,SAAU,SAACC,GAAD,OA5CrB,SAACA,GACzBA,EAAEC,iBACF,IAEMC,EAFSF,EAAEzI,OAAO4I,WAAWC,MAEZC,MAAM,KACvBC,EAAQJ,EAAM,IAAMA,EAAM,GAAGK,OAC7BlF,EAAO6E,EAAM,IAAMA,EAAM,GAAGK,OAE7BD,GAAUjF,GAMfmE,EAAc,CAAEc,QAAOjF,SACvBqE,EAAgB,KANdA,EACE,+DAkCgDc,CAAkBR,KAChE,2BACE7I,UAAWC,IAAQqJ,MACnBpF,KAAK,aACLqF,KAAK,OACLC,YAAY,MAEd,0BAAMxJ,UAAWC,IAAQuJ,aAAzB,2BACA,4BAAQxJ,UAAWC,IAAQwJ,UAAWF,KAAK,UAA3C,WAKDjB,GAAgB,uBAAGtI,UAAWC,IAAQqI,cAAeA,MC+C/CoB,EA3GH,WACVhH,QAAQC,IAAI,OADI,IA4CZgH,EACA/E,EACAD,EACAiF,EA/CY,EAGoB7G,mBAElC,gBALc,mBAGT2E,EAHS,KAGGC,EAHH,OAMoB5E,mBAAS,CAAEoG,MAAO,GAAIjF,KAAM,KANhD,mBAMT2F,EANS,KAMGxB,EANH,OAQI,CAClByB,aAAc,CACZjH,UAAU,eAAMgH,GAChBjH,UAAW,gBAEbmH,WAAY,CACVlH,UAAU,eAAMgH,EAAP,CAAmBG,OAAQ,CAAC,UACrCpH,UAAW,UAGbqH,aAAc,CACZpH,UAAU,eAAMgH,EAAP,CAAmBG,OAAQ,CAAC,YACrCpH,UAAW,WAI8B8E,GAArC7E,EAxBQ,EAwBRA,UAAWD,EAxBH,EAwBGA,UAxBH,EAkCZJ,EAAS,CACXI,YACAC,YACAC,MAAO+G,EAAW3F,OAVlBlB,EA3Bc,EA2BdA,KACAE,EA5Bc,EA4BdA,mBACAE,EA7Bc,EA6BdA,gBACAM,EA9Bc,EA8BdA,UACAS,EA/Bc,EA+BdA,UACAb,EAhCc,EAgCdA,gBACAE,EAjCc,EAiCdA,UAgBF,GATAsB,qBAAU,WACRpB,MACC,CAACmG,EAAYnC,IAOZ1E,EAAM,CAAC,IAAD,EACyBA,EAAKiB,WAA9BiG,EADA,EACAA,OAAQJ,EADR,EACQA,aAChBH,EAAcO,GAAUJ,EAG1B,GAAIxG,EAAiB,CAAC,IAAD,EACcA,EAAgBiB,QAAQN,WAAjDiG,EADW,EACXA,OAAQJ,EADG,EACHA,aACVK,EAAgB7G,EAAgBgB,cACtCqF,EAAcO,GAAUJ,GACZ5E,MAAZ,sBAAwBiF,GAAxB,YAA0CR,EAAYzE,QASxD,OANIyE,IACF/E,EAAY+E,EAAYxE,SAASP,UACjCD,EAAcgF,EAAYxE,SAASR,YACnCiF,EAAqBD,EAAYzE,MAAMmB,QAGrCjD,EACK,qDAIP,oCACGI,GAAa,kBAACyC,EAAD,MACd,kBAAC,EAAD,CAAQoC,cAAeA,IAEvB,yBAAKrI,UAAWC,IAAQmK,WACrBlH,GAAsB,2BAAIA,GAC1BF,GACC,oCACE,4BACGA,EAAKiB,WAAWkF,MAAM1D,MADzB,MACmCzC,EAAKiB,WAAWC,MAEnD,kBAAC,EAAD,CAAUwD,WAAYA,EAAYC,cAAeA,IACjD,kBAAC,EAAD,CAAOpB,MAAOoD,IACbhF,GACC,yBAAK3E,UAAWC,IAAQoK,qBACtB,4BACErK,UAAWC,IAAQkG,aACnBC,QAAS,WACPjC,EAAU,CACRG,aAAcqF,EAAYzE,MAC1Bb,OAAQO,MALd,iBASiBgF,EATjB,IASsCD,EAAY9E,WATlD,UCnFIyF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5I,QAAQ4I,MAAMA,EAAMtH,a,kBExI5BtE,EAAOC,QAAU,CAAC,OAAS,oBAAsB,YAAc,UAAU,gBAAkB,kCAAkC,YAAc,8BAA8B,mBAAqB,qCAAqC,aAAe,iC,kBCAlPD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,aAAe,0BAA0B,oBAAsB,oC","file":"static/js/main.d07ea196.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"../../index.css\\\"\",\"borderColor\":\"#E1E1E1\",\"mainBkg\":\"#f9f9f9\",\"tapWrapper\":\"TabPanel_tapWrapper__2ZDxF\",\"normalTap\":\"TabPanel_normalTap__BVurl\",\"activeTab\":\"TabPanel_activeTab__1QoYL TabPanel_normalTap__BVurl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePic\":\"AuthorInfo_profilePic__39Sne\",\"link\":\"AuthorInfo_link__PM8bl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingCircle\":\"LoadingCircle_loadingCircle__3ImjQ\",\"spin\":\"LoadingCircle_spin__2msQP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"../../index.css\\\"\",\"brownOrange\":\"#dd6e42\",\"mainDarkBlue\":\"#4f6d7a\",\"lightOrange\":\"#ef8354\",\"brickOrange\":\"#D85113\",\"lightMelon\":\"#ffdab9\",\"melon\":\"#fbc4ab\",\"nav\":\"Navbar_nav__3O7LN\",\"logo\":\"Navbar_logo__3IRT5\",\"link\":\"Navbar_link__1FkAi\",\"form\":\"Navbar_form__3BUoN\",\"input\":\"Navbar_input__1lY1_\",\"submitBtn\":\"Navbar_submitBtn__3ddgF\",\"placeholder\":\"Navbar_placeholder__Rv6AA\",\"inputWarning\":\"Navbar_inputWarning__mGBch\",\"formWrapper\":\"Navbar_formWrapper__1WAqs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"../../index.css\\\"\",\"borderColor\":\"#E1E1E1\",\"brownOrange\":\"#dd6e42\",\"issueWrapper\":\"Issue_issueWrapper__2-3Zb\",\"issueDetailsWrapper\":\"Issue_issueDetailsWrapper__j67Aa\",\"issueText\":\"Issue_issueText__33BuE\",\"btnWrapper\":\"Issue_btnWrapper__1qeP2\",\"toggleBtn\":\"Issue_toggleBtn__3Z-RH\",\"toggleBtnDisabled\":\"Issue_toggleBtnDisabled__34Wwv\"};","import React from \"react\";\nimport { getFormattedDate } from \"../../service/getFormattedDate\";\nimport classes from \"./AuthorInfo.module.css\";\n\ninterface IProps {\n  authorName: string;\n  avatarUrl: string;\n  timeStamp: string;\n}\n\nconst AuthorBasicInfo: React.FC<IProps> = ({\n  authorName,\n  avatarUrl,\n  timeStamp,\n}) => {\n  return (\n    <>\n      <a\n        className={classes.link}\n        href={`https://github.com/${authorName}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <img src={avatarUrl} alt={authorName} className={classes.profilePic} />\n        <strong>{authorName}</strong>\n      </a>\n      <span> &#8226; {getFormattedDate(timeStamp)}</span>\n    </>\n  );\n};\n\nexport default AuthorBasicInfo;\n","export const getFormattedDate = (timeStamp: string): string => {\n  interface MonthDict {\n    [key: number]: string;\n  }\n\n  let monthEng: MonthDict = {\n    0: \"Jan\",\n    1: \"Feb\",\n    2: \"Mar\",\n    3: \"Apr\",\n    4: \"May\",\n    5: \"Jun\",\n    6: \"Jul\",\n    7: \"Aug\",\n    8: \"Sep\",\n    9: \"Oct\",\n    10: \"Nov\",\n    11: \"Dec\",\n  };\n\n  let formattedDate = new Date(timeStamp);\n  let date = formattedDate.getDate();\n  let monthNum = formattedDate.getMonth();\n  let month = monthEng[monthNum];\n  let year = formattedDate.getFullYear();\n  let hh = String(formattedDate.getHours()).padStart(2, \"0\");\n  let mm = String(formattedDate.getMinutes()).padStart(2, \"0\");\n\n  return `${date} ${month} ${year} ${hh}:${mm}`;\n};\n","import React from \"react\";\nimport classes from \"./LoadingCircle.module.css\";\n\nconst Loader = () => {\n  return <div className={classes.loadingCircle}></div>;\n};\n\nexport default Loader;\n","import { useState } from \"react\";\nimport axios from \"axios\";\nimport { config } from \"../constants\";\n\nconst url = config.url.API_URL;\n\ninterface FetchIssuesOrPrVariables {\n  owner: string;\n  name: string;\n  states?: any;\n}\n\ninterface FetchCommentsVariables {\n  ID: string;\n}\n\ninterface useFetchReqObj {\n  queryType: string;\n  variables: FetchIssuesOrPrVariables | FetchCommentsVariables;\n  skip: boolean;\n}\n\nconst useFetch = (useFetchReqObj: useFetchReqObj) => {\n  console.log(\"USEFETCH\");\n  const { queryType, variables, skip } = useFetchReqObj;\n\n  const [data, setData] = useState<any | null>(null);\n  const [errorFromGithubApi, setErrorFromGithubApi] = useState<string | null>(\n    null\n  );\n  const [errorFromServer, setErrorFromServer] = useState<string | null>(null);\n  const [fetchMoreResult, setFetchMoreResult] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const fetchData = async () => {\n    if (skip) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const { data } = await axios.post(url, {\n        queryType,\n        variables,\n      });\n\n      if (data.response) {\n        //when no data is found\n        setErrorFromGithubApi(data.response.errors[0].message);\n        setData(null);\n        setErrorFromServer(null);\n        setFetchMoreResult(null);\n        setIsLoading(false);\n        return;\n      }\n\n      if (data.repository === null) {\n        //when requested repository is private\n        const { name } = variables as FetchIssuesOrPrVariables;\n        setErrorFromGithubApi(\n          `Could not resolve to a Repository with the name '${name}'.`\n        );\n        setData(null);\n        setErrorFromServer(null);\n        setFetchMoreResult(null);\n        setIsLoading(false);\n        return;\n      }\n\n      // when data successfully retrieved\n      setData(data);\n      setErrorFromGithubApi(null);\n      setErrorFromServer(null);\n      setFetchMoreResult(null);\n      setIsLoading(false);\n    } catch (err) {\n      //error from server\n      setErrorFromServer(err);\n      setData(null);\n      setIsLoading(false);\n    }\n  };\n\n  interface FetchMoreReqObj {\n    previousData: any;\n    cursor: any;\n  }\n\n  const fetchMore = async (fetchMoreReqObj: FetchMoreReqObj) => {\n    if (skip) {\n      return;\n    }\n\n    const { cursor } = fetchMoreReqObj;\n\n    try {\n      setIsLoading(true);\n      const { data } = await axios.post(url, {\n        queryType,\n        variables: { ...variables, cursor: cursor },\n      });\n\n      if (data.response) {\n        //when no data is found\n        setErrorFromGithubApi(data.response.errors[0].message);\n        setIsLoading(false);\n        return;\n      }\n      //when more data successfully retrived\n      setFetchMoreResult({\n        previousData: fetchMoreReqObj.previousData,\n        newData: data,\n      });\n      setIsLoading(false);\n    } catch (err) {\n      //error from server\n      setErrorFromServer(err);\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    data,\n    errorFromGithubApi,\n    errorFromServer,\n    fetchData,\n    fetchMore,\n    fetchMoreResult,\n    isLoading,\n  };\n};\n\nexport default useFetch;\n","declare let process: {\n  env: {\n    [key: string]: string;\n  };\n};\n\nconst prod = {\n  url: {\n    API_URL: `https://repos-checker-server.herokuapp.com/api`,\n  },\n};\n\nconst dev = {\n  url: {\n    API_URL: `/api`,\n  },\n};\n\nexport const config = process.env.NODE_ENV === `development` ? dev : prod;\n","import React, { useEffect } from \"react\";\nimport AuthorInfo from \"../AuthorInfo/AuthorInfo\";\nimport LoadingCircle from \"../LoadingCircle/LoadingCircle\";\nimport classes from \"./Comments.module.css\";\nimport useFetch from \"../../hooks/useFetch\";\n\n/*By typing our component as an FC, \nthe React TypeScripts types allow us to handle children and defaultProps correctly.  */\n\ninterface IProps {\n  ID: string;\n}\n\nconst Comments: React.FC<IProps> = ({ ID }) => {\n  console.log(\"Comments\");\n\n  const {\n    data,\n    errorFromGithubApi,\n    errorFromServer,\n    fetchData,\n    fetchMore,\n    fetchMoreResult,\n    isLoading,\n  } = useFetch({\n    queryType: \"comments\",\n    variables: { ID },\n    skip: !ID /*avoid fetching during initial render*/,\n  });\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  let displayComments: any;\n  let hasNextPage: any;\n  let endCursor: any;\n  let totalCount: any;\n  if (data) {\n    displayComments = data.node.comments;\n  }\n\n  if (fetchMoreResult) {\n    const oldEdges = fetchMoreResult.previousData;\n    displayComments = fetchMoreResult.newData.node.comments;\n    displayComments.edges = [...oldEdges, ...displayComments.edges];\n  }\n\n  if (displayComments) {\n    const { pageInfo } = displayComments;\n    hasNextPage = pageInfo.hasNextPage;\n    endCursor = pageInfo.endCursor;\n    totalCount = displayComments.totalCount;\n  }\n\n  const displayElements =\n    displayComments &&\n    displayComments.edges.map((el: any, key: number) => {\n      const { avatarUrl, login } = el.node.author;\n\n      return (\n        <div className={classes.eachCommentWrapper} key={key}>\n          <AuthorInfo\n            authorName={login}\n            avatarUrl={avatarUrl}\n            timeStamp={el.node.createdAt}\n          />\n\n          <div\n            className={classes.commentText}\n            dangerouslySetInnerHTML={{ __html: el.node.bodyHTML }}\n          />\n        </div>\n      );\n    });\n\n  return (\n    <>\n      {isLoading && <LoadingCircle />}\n      {displayElements && (\n        <div className={classes.commentsWrapper}>\n          <h3>Comments ({totalCount})</h3>\n          {displayElements}\n          {hasNextPage && (\n            <button\n              className={classes.fetchMoreBtn}\n              onClick={() => {\n                fetchMore({\n                  previousData: displayComments.edges,\n                  cursor: endCursor,\n                });\n              }}\n            >\n              View more comments... ({displayComments.edges.length}/{totalCount}\n              )\n            </button>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Comments;\n","import React, { useState, useEffect } from \"react\";\nimport Comments from \"../Comments/Comments\";\nimport AuthorInfo from \"../AuthorInfo/AuthorInfo\";\nimport classes from \"./Issue.module.css\";\n\ninterface Iprops {\n  issue: any;\n}\n\nconst Issue: React.FC<Iprops> = ({ issue }) => {\n  console.log(\"ISSUES\");\n  const [activeIssue, setActiveIssue] = useState<number | null>(null);\n  const [showComments, setShowComments] = useState<boolean>(false);\n\n  useEffect(() => {\n    setActiveIssue(null);\n  }, [issue]);\n\n  issue = issue.edges.map((el: any, issueIndex: number) => {\n    const numOfComments = el.node.comments.totalCount;\n\n    const { login, avatarUrl } = el.node.author;\n    const issueContent = el.node.bodyHTML;\n\n    const isActiveIssue = activeIssue === issueIndex;\n\n    return (\n      <div key={issueIndex} className={classes.issueWrapper}>\n        <AuthorInfo\n          authorName={login}\n          avatarUrl={avatarUrl}\n          timeStamp={el.node.createdAt}\n        />\n        <div className={classes.issueDetailsWrapper}>\n          <h4>{el.node.title}</h4>\n\n          {!isActiveIssue && (\n            <button\n              className={classes.toggleBtn}\n              onClick={() => {\n                setActiveIssue(issueIndex);\n                setShowComments(false);\n              }}\n            >\n              &#8853; Read more\n            </button>\n          )}\n\n          {isActiveIssue && (\n            <>\n              <div\n                className={classes.issueText}\n                dangerouslySetInnerHTML={{ __html: issueContent }}\n              />\n\n              {showComments && <Comments ID={el.node.id} />}\n\n              <div className={classes.btnWrapper}>\n                {!showComments && (\n                  <>\n                    <button\n                      className={\n                        numOfComments\n                          ? classes.toggleBtn\n                          : classes.toggleBtnDisabled\n                      }\n                      onClick={() => setShowComments(true)}\n                      disabled={!numOfComments}\n                    >\n                      &#128172; Comments ({numOfComments})\n                    </button>\n                    |\n                  </>\n                )}\n\n                <button\n                  className={classes.toggleBtn}\n                  onClick={() => {\n                    setActiveIssue(null);\n                    setShowComments(false);\n                  }}\n                >\n                  &#8854; Close\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  });\n  return issue;\n};\n\nexport default Issue;\n","import React from \"react\";\nimport classes from \"./TabPanel.module.css\";\n\ninterface IProps {\n  currentTab: \"pullRequests\" | \"openIssues\" | \"closedIssues\";\n  setCurrentTab: any;\n}\n\nconst TabPanel: React.FC<IProps> = ({ currentTab, setCurrentTab }) => {\n  console.log(\"PANEL\");\n  const tabs = [\n    { label: \"Pull Requests\", representedState: \"pullRequests\" },\n    { label: \"Open Issues\", representedState: \"openIssues\" },\n    { label: \"Closed Issues\", representedState: \"closedIssues\" },\n  ];\n\n  const displayTabs = tabs.map((el, i) => {\n    let isActive = false;\n    if (el.representedState === currentTab) {\n      isActive = true;\n    }\n\n    return (\n      <button\n        key={i}\n        className={`${isActive ? classes.activeTab : classes.normalTap}`}\n        onClick={() => {\n          setCurrentTab(el.representedState);\n        }}\n      >\n        {el.label}\n      </button>\n    );\n  });\n\n  return <div className={classes.tapWrapper}>{displayTabs}</div>;\n};\nexport default TabPanel;\n","import React, { useState } from \"react\";\nimport classes from \"./Navbar.module.css\";\n\ninterface IProps {\n  setReposQuery: (value: { owner: string; name: string }) => void;\n}\n\nconst Navbar: React.FC<IProps> = ({ setReposQuery }) => {\n  const [inputWarning, setInputWarning] = useState(\"\");\n\n  console.log(\"FORMS\");\n  const handleSearchQuery = (e: any) => {\n    e.preventDefault();\n    let queryStr = e.target.queryInput.value;\n\n    const query = queryStr.split(\"/\");\n    const owner = query[0] && query[0].trim();\n    const name = query[1] && query[1].trim();\n\n    if (!owner || !name) {\n      setInputWarning(\n        \"* Please provide owner and name of the selected repository.\"\n      );\n      return;\n    }\n    setReposQuery({ owner, name });\n    setInputWarning(\"\");\n  };\n\n  return (\n    <>\n      <nav className={classes.nav}>\n        <span className={classes.logo}>\n          <i className=\"fab fa-github-alt\"></i> Repos Checker\n        </span>\n        <div>\n          <a\n            className={classes.link}\n            href=\"https://developer.github.com/v4/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            API\n          </a>\n          <a\n            className={classes.link}\n            href=\"https://github.com/shanwong29/repos-checker-2.0\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Code\n          </a>\n        </div>\n      </nav>\n      <div className={classes.formWrapper}>\n        <form className={classes.form} onSubmit={(e) => handleSearchQuery(e)}>\n          <input\n            className={classes.input}\n            name=\"queryInput\"\n            type=\"text\"\n            placeholder=\" \"\n          />\n          <span className={classes.placeholder}>e.g. google / go-github</span>\n          <button className={classes.submitBtn} type=\"submit\">\n            Search\n          </button>\n        </form>\n\n        {inputWarning && <p className={classes.inputWarning}>{inputWarning}</p>}\n      </div>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, useEffect } from \"react\";\nimport classes from \"./App.module.css\";\nimport Issue from \"./Component/Issue/Issue\";\nimport TabPanel from \"./Component/TabPanel/TabPanel\";\nimport Navbar from \"./Component/Navbar/Navbar\";\nimport LoadingCircle from \"./Component/LoadingCircle/LoadingCircle\";\nimport useFetch from \"./hooks/useFetch\";\n\nconst App = () => {\n  console.log(\"APP\");\n\n  const [currentTab, setCurrentTab] = useState<\n    \"pullRequests\" | \"openIssues\" | \"closedIssues\"\n  >(\"pullRequests\");\n  const [reposQuery, setReposQuery] = useState({ owner: \"\", name: \"\" });\n\n  const requestDict = {\n    pullRequests: {\n      variables: { ...reposQuery },\n      queryType: \"pullRequests\",\n    },\n    openIssues: {\n      variables: { ...reposQuery, states: [\"OPEN\"] },\n      queryType: \"issues\",\n    },\n\n    closedIssues: {\n      variables: { ...reposQuery, states: [\"CLOSED\"] },\n      queryType: \"issues\",\n    },\n  };\n\n  const { variables, queryType } = requestDict[currentTab];\n\n  const {\n    data,\n    errorFromGithubApi,\n    errorFromServer,\n    fetchData,\n    fetchMore,\n    fetchMoreResult,\n    isLoading,\n  } = useFetch({\n    queryType,\n    variables,\n    skip: !reposQuery.name /*avoid fetching during initial render*/,\n  });\n\n  useEffect(() => {\n    fetchData();\n  }, [reposQuery, currentTab]);\n\n  let displayData: any;\n  let endCursor: string;\n  let hasNextPage;\n  let lengthOfEdgesShown;\n\n  if (data) {\n    const { issues, pullRequests } = data.repository;\n    displayData = issues || pullRequests;\n  }\n\n  if (fetchMoreResult) {\n    const { issues, pullRequests } = fetchMoreResult.newData.repository;\n    const previousEdges = fetchMoreResult.previousData;\n    displayData = issues || pullRequests;\n    displayData.edges = [...previousEdges, ...displayData.edges];\n  }\n\n  if (displayData) {\n    endCursor = displayData.pageInfo.endCursor;\n    hasNextPage = displayData.pageInfo.hasNextPage;\n    lengthOfEdgesShown = displayData.edges.length;\n  }\n\n  if (errorFromServer) {\n    return <h1>Something goes wrong!</h1>;\n  }\n\n  return (\n    <>\n      {isLoading && <LoadingCircle />}\n      <Navbar setReposQuery={setReposQuery} />\n\n      <div className={classes.reposInfo}>\n        {errorFromGithubApi && <p>{errorFromGithubApi}</p>}\n        {data && (\n          <>\n            <h1>\n              {data.repository.owner.login} / {data.repository.name}\n            </h1>\n            <TabPanel currentTab={currentTab} setCurrentTab={setCurrentTab} />\n            <Issue issue={displayData} />\n            {hasNextPage && (\n              <div className={classes.fetchMoreBtnWrapper}>\n                <button\n                  className={classes.fetchMoreBtn}\n                  onClick={() => {\n                    fetchMore({\n                      previousData: displayData.edges,\n                      cursor: endCursor,\n                    });\n                  }}\n                >\n                  Load more... ({lengthOfEdgesShown}/{displayData.totalCount})\n                </button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"../../index.css\\\"\",\"borderColor\":\"#E1E1E1\",\"commentsWrapper\":\"Comments_commentsWrapper__Re4qN\",\"commentText\":\"Comments_commentText__ZxEND\",\"eachCommentWrapper\":\"Comments_eachCommentWrapper__1cmNN\",\"fetchMoreBtn\":\"Comments_fetchMoreBtn__2KA3k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reposInfo\":\"App_reposInfo__3Ze_c\",\"fetchMoreBtn\":\"App_fetchMoreBtn__1Va5s\",\"fetchMoreBtnWrapper\":\"App_fetchMoreBtnWrapper__W3Tli\"};"],"sourceRoot":""}